<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c>* Find light objects in the image</c>
<l>read_image (Image, '419rect1.JPG')</l>
<c></c>
<l>threshold (Image, Region, 128,255)</l>
<l>closing_rectangle1(Region,RegionClose,250,250)</l>
<l>opening_rectangle1(RegionClose,RegionOpen,150,150)</l>
<c></c>
<l>connection (RegionOpen, ConnectedRegions)</l>
<c></c>
<l>fill_up (ConnectedRegions, RegionFillUp)</l>
<c>* Select rectangular solid objects with certain minimal area</c>
<l>select_shape (RegionFillUp, Objects, ['area','convexity','rectangularity'], 'and', [20000,0.85,0.60], [4000000,1,1])</l>
<c>* Filter out features on the border</c>
<c></c>
<c></c>
<l>dilation_rectangle1 (Objects, RectDilated, 39, 39)</l>
<l>erosion_rectangle1 (Objects, RectEroded, 39, 39)</l>
<l>difference (RectDilated, RectEroded, RectBorders)</l>
<c></c>
<l>count_obj (Objects, NumberOfRegions)</l>
<l>reduce_domain (Image, RectBorders, ImageReduced)</l>
<c></c>
<c></c>
<l>edges_sub_pix(Image,Edges,'lanser2',0.5,20,40)</l>
<l>select_shape_xld (Edges, SelectedEdges, 'contlength', 'and', 100, 10000)</l>
<l>union_adjacent_contours_xld (SelectedEdges, UnionEdges, 10, 1, 'attr_keep')</l>
<c></c>
<l>RectWidth := 0.0645</l>
<c></c>
<l>RectHeight := 0.0255</l>
<l>read_cam_par ('419camera1.cal', CamParam)</l>
<l>read_pose ('419camera1pos.dat', CamPose)</l>
<l>get_rectangle_pose (UnionEdges, CamParam, RectWidth, RectHeight, 'tukey', 2, Pose, PoseCov, Error)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="pose_quality">
<interface>
<ic>
<par name="PoseCov" base_type="ctrl" dimension="0"/>
<par name="Error" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseIsGood" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>PoseIsGood := 1</l>
<l>if (Error &gt; 0.7)</l>
<l>    PoseIsGood := 0</l>
<l>    return ()</l>
<l>endif</l>
<l>if (PoseCov[21] &gt; 0.05 or PoseCov[28] &gt; 0.05 or abs(PoseCov[22]) &gt; 0.05)</l>
<l>    PoseIsGood := 0</l>
<l>    return ()</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="pose_quality">
<short lang="en_US">Checks quality criteria for estimated pose</short>
<short lang="zh_CN">Checks quality criteria for estimated pose</short>
<parameters>
<parameter id="Error"/>
<parameter id="PoseCov"/>
<parameter id="PoseIsGood"/>
</parameters>
</docu>
</procedure>
<procedure name="estimate_pose_from_region">
<interface>
<io>
<par name="RectangularRegions" base_type="iconic" dimension="0"/>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Cont" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="RectWidth" base_type="ctrl" dimension="0"/>
<par name="RectHeight" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Setup error handling</c>
<l>dev_set_check ('~give_error')</l>
<l>dev_error_var (ErrorVar, 1)</l>
<c>* Coordinates of the box vertices</c>
<l>XCoord := 0.5 * [-RectWidth,RectWidth,RectWidth,-RectWidth,-RectWidth]</l>
<l>XCoord := [XCoord,XCoord]</l>
<l>YCoord := 0.5 * [-RectHeight,-RectHeight,RectHeight,RectHeight,-RectHeight]</l>
<l>YCoord := [YCoord,YCoord]</l>
<l>ZCoord := [0.01,0.01,0.01,0.01,0.01]</l>
<l>ZCoord := [0,0,0,0,0,ZCoord]</l>
<c>* Narrow the Region of interest</c>
<l>dilation_rectangle1 (RectangularRegions, RectDilated, 9, 9)</l>
<l>erosion_rectangle1 (RectangularRegions, RectEroded, 9, 9)</l>
<l>difference (RectDilated, RectEroded, RectBorders)</l>
<l>select_shape (RectBorders, RectBorders, 'area', 'and', 600, 99999)</l>
<l>count_obj (RectBorders, Number)</l>
<l>PoseOut := []</l>
<l>gen_empty_obj (Cont)</l>
<l>for I := 1 to Number by 1</l>
<l>    select_obj (RectBorders, RectSelected, I)</l>
<c>    * Extract contour in the narrowed ROI</c>
<l>    reduce_domain (Image, RectSelected, ImageReduced)</l>
<l>    edges_sub_pix (ImageReduced, Edges, 'canny', 0.7, 20, 30)</l>
<c>    * Filter out small accident contours and union the rest of the contours</c>
<l>    select_shape_xld (Edges, SelectedEdges, 'contlength', 'and', 20, 10000)</l>
<l>    union_adjacent_contours_xld (SelectedEdges, UnionEdges, 10, 1, 'attr_keep')</l>
<l>    dev_set_color ('medium slate blue')</l>
<l>    dev_display (UnionEdges)</l>
<l>    count_obj (UnionEdges, NumberEdges)</l>
<l>    if (NumberEdges &gt; 0)</l>
<l>        close_contours_xld (UnionEdges, ClosedContours)</l>
<c>        * Estimate pose of the rectangle</c>
<l>        get_rectangle_pose (UnionEdges, CamParam, RectWidth, RectHeight, 'huber', 2, Pose, PoseCov, Error)</l>
<l>        if (ErrorVar == H_MSG_TRUE)</l>
<l>            pose_quality (PoseCov, Error, PoseIsGood)</l>
<l>            if (PoseIsGood)</l>
<l>                pose_to_hom_mat3d (Pose, HomMat3D)</l>
<l>                affine_trans_point_3d (HomMat3D, [0,0], [0,0], [0,1], Qx, Qy, Qz)</l>
<l>                if (Qz[1] - Qz[0] &gt; 0)</l>
<c>                    * Invert the Z direction of the pose, if it is pointing away from the camera</c>
<l>                    Pose[4] := Pose[4] + 180</l>
<l>                    Pose[5] := -Pose[5]</l>
<l>                endif</l>
<l>                PoseOut := [PoseOut,Pose]</l>
<l>                concat_obj (Cont, ClosedContours, Cont)</l>
<c>                * Draw the frame box</c>
<l>                pose_to_hom_mat3d (Pose, HomMat3D)</l>
<l>                affine_trans_point_3d (HomMat3D, XCoord, YCoord, ZCoord, Qx, Qy, Qz)</l>
<l>                project_3d_point (Qx, Qy, Qz, CamParam, Row, Column)</l>
<l>                gen_contour_polygon_xld (BoxBottom, Row[0:4], Column[0:4])</l>
<l>                dev_set_color ('green')</l>
<l>                dev_display (BoxBottom)</l>
<l>                dev_set_color ('red')</l>
<l>                for J := 0 to 3 by 1</l>
<l>                    gen_contour_polygon_xld (BoxEdge, [Row[J],Row[J + 5]], [Column[J],Column[J + 5]])</l>
<l>                    dev_display (BoxEdge)</l>
<l>                endfor</l>
<l>                gen_contour_polygon_xld (BoxCover, Row[5:9], Column[5:9])</l>
<l>                dev_set_color ('blue')</l>
<l>                dev_display (BoxCover)</l>
<l>            endif</l>
<l>        endif</l>
<l>    endif</l>
<l>endfor</l>
<c>* Restore the state of the error handling</c>
<l>dev_error_var (ErrorVar, 0)</l>
<l>dev_set_check ('give_error')</l>
<l>return ()</l>
</body>
<docu id="estimate_pose_from_region">
<short lang="en_US">extracts contour of a rectangle in a region and estimates its pose; draws a box ontop of it</short>
<short lang="zh_CN">extracts contour of a rectangle in a region and estimates its pose; draws a box ontop of it</short>
<parameters>
<parameter id="CamParam"/>
<parameter id="Cont"/>
<parameter id="Image"/>
<parameter id="PoseOut"/>
<parameter id="RectHeight"/>
<parameter id="RectWidth"/>
<parameter id="RectangularRegions"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
